name: "Set up test db"
description: "Set up test db"
inputs:
  db_user:
    description: DB user
    required: false
    default: admin
  db_password:
    description: DB password
    required: false
    default: admin
  db_name:
    description: DB user
    required: false
    default: all_services_test
  db_port:
    description: DB port
    required: false
    default: "5432"
  db_extensions:
    description: DB extensions list separated by a space
    required: false
    default: uuid-ossp
  db_schemas:
    description: DB schemas list to create separated by a space
    required: false
  db_migrations_path:
    description: Db migrations path
    required: false
    default: db/migrations
  db_migrations_config_path:
    description: Db migrations config path
    required: false
    default: db/test/conf/flyway.conf
  github_token:
    description: Github token
    required: false
  migrate_chat:
    description: Migrate chat service
    required: false
    default: "false"
  migrate_employee:
    description: Migrate employee service
    required: false
    default: "false"
  migrate_case:
    description: Migrate case service
    required: false
    default: "false"
  migrate_dashboard:
    description: Migrate dashboard service
    required: false
    default: "false"
  migrate_self:
    description: Migrate the service itself
    required: false
    default: "true"
  migrate_self_before:
    description: Migrate the service itself before (chat, employee, case, dashboard, last)
    required: false
    default: "last"

runs:
  using: "composite"
  steps:
      - name: Setup Postgres database
        uses: Daniel-Marynicz/postgresql-action@master
        with:
          postgres_image_tag: 12.7
          app_user: "${{ inputs.db_user }}"
          app_user_password: "${{ inputs.db_password }}"
          app_db: "${{ inputs.db_name }}"
          postgres_extensions: "${{ inputs.db_extensions }}"

      - name: Install psql
        run: |
          sudo apt-get update -qq
          sudo apt-get install --yes --no-install-recommends postgresql-client
        shell: bash

      - name: Create schemas
        shell: bash
        id: create-schemas
        if: inputs.db_schemas != ''
        run: |
          IFS=' ' read -r -a schemas <<< "${{ inputs.db_schemas }}"
          connection_string="postgres://${{ inputs.db_user }}:${{ inputs.db_password }}@localhost:${{ inputs.db_port }}/${{ inputs.db_name }}"
          for schema in "${schemas[@]}"
          do
            psql -d $connection_string -c "CREATE SCHEMA IF NOT EXISTS $schema;"
          done

      - name: Cache Flyway binary
        uses: actions/cache@v3
        id: cache-flyway
        with:
          path: flyway-8.5.11
          key: flyway-8.5.11-linux-x64

      - name: Install Flyway (if not cached)
        if: steps.cache-flyway.outputs.cache-hit != 'true'
        shell: bash
        run: wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/8.5.11/flyway-commandline-8.5.11-linux-x64.tar.gz | tar xvz

      - name: Configure Flyway
        shell: bash
        run: sudo ln -s `pwd`/flyway-8.5.11/flyway /usr/local/bin

      - name: Make migrations before chat
        shell: bash
        id: make-migrations-before-chat
        if: inputs.migrate_self == 'true' && inputs.migrate_self_before == 'chat'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=${{ inputs.db_user }} \
            -password=${{ inputs.db_password }} \
            -locations=${{ inputs.db_migrations_path }} \
            -configFiles=${{ inputs.db_migrations_config_path }}

      # Migrate chat service
      - name: Copy migrations from chat
        uses: actions/checkout@v3
        if: inputs.migrate_chat == 'true'
        with:
          repository: 'meetlara/chat-service'
          ref: 'main'
          token: ${{ inputs.github_token }} 
          path: chat-service
      - name: Make chat migrations
        shell: bash
        id: make-chat-migrations
        if: inputs.migrate_chat == 'true'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=admin \
            -password=admin \
            -locations=chat-service/${{ inputs.db_migrations_path }} \
            -configFiles=chat-service/${{ inputs.db_migrations_config_path }}

      - name: Make migrations before employee
        shell: bash
        id: make-migrations-before-employee
        if: inputs.migrate_self == 'true' && inputs.migrate_self_before == 'employee'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=${{ inputs.db_user }} \
            -password=${{ inputs.db_password }} \
            -locations=${{ inputs.db_migrations_path }} \
            -configFiles=${{ inputs.db_migrations_config_path }}

      # Migrate employee service
      - name: Copy migrations from employee-service
        uses: actions/checkout@v3
        if: inputs.migrate_employee == 'true'
        with:
          repository: 'meetlara/employee-service'
          ref: 'main'
          token: ${{ inputs.github_token }} 
          path: employee-service
      - name: Make employee migrations
        shell: bash
        id: make-employee-migrations
        if: inputs.migrate_employee == 'true'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=admin \
            -password=admin \
            -locations=employee-service/${{ inputs.db_migrations_path }} \
            -configFiles=employee-service/${{ inputs.db_migrations_config_path }}

      - name: Make migrations before case
        shell: bash
        id: make-migrations-before-case
        if: inputs.migrate_self == 'true' && inputs.migrate_self_before == 'case'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=${{ inputs.db_user }} \
            -password=${{ inputs.db_password }} \
            -locations=${{ inputs.db_migrations_path }} \
            -configFiles=${{ inputs.db_migrations_config_path }}

      # Migrate case service
      - name: Copy migrations from cases
        uses: actions/checkout@v3
        if: inputs.migrate_case == 'true'
        with:
          repository: 'meetlara/case-service'
          ref: 'main'
          token: ${{ inputs.github_token }} 
          path: case-service
      - name: Make case migrations
        shell: bash
        id: make-case-migrations
        if: inputs.migrate_case == 'true'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=admin \
            -password=admin \
            -locations=case-service/${{ inputs.db_migrations_path }} \
            -configFiles=case-service/${{ inputs.db_migrations_config_path }}

      - name: Make migrations before dashboard
        shell: bash
        id: make-migrations-before-dashboard
        if: inputs.migrate_self == 'true' && inputs.migrate_self_before == 'dashboard'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=${{ inputs.db_user }} \
            -password=${{ inputs.db_password }} \
            -locations=${{ inputs.db_migrations_path }} \
            -configFiles=${{ inputs.db_migrations_config_path }}

      # Migrate dashboard service
      - name: Copy migrations from dashboard
        uses: actions/checkout@v3
        if: inputs.migrate_dashboard == 'true'
        with:
          repository: 'meetlara/dashboard-service'
          ref: 'main'
          token: ${{ inputs.github_token }} 
          path: dashboard-service
      - name: Make dashboard migrations
        shell: bash
        id: make-dashboard-migrations
        if: inputs.migrate_dashboard == 'true'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=admin \
            -password=admin \
            -locations=dashboard-service/${{ inputs.db_migrations_path }} \
            -configFiles=dashboard-service/${{ inputs.db_migrations_config_path }}

      # Migrate the service itself
      - name: Make migrations
        shell: bash
        id: make-migrations
        if: inputs.migrate_self == 'true' && inputs.migrate_self_before == 'last'
        run: |
          flyway migrate -url=jdbc:postgresql://localhost:${{ inputs.db_port }}/${{ inputs.db_name }} \
            -user=${{ inputs.db_user }} \
            -password=${{ inputs.db_password }} \
            -locations=${{ inputs.db_migrations_path }} \
            -configFiles=${{ inputs.db_migrations_config_path }}

